#!/bin/sh
set -eu

OVERLAY_DIR=/overlay/upper
ROM_DIR=/rom

list_files() {
  list_files_collector "$@" | \
    list_files_filter "$@" | \
    list_files_action "$@"
  }

list_files_collector() ( # use brackets for true forked subshell
  find_opts=
  find_dirs=
  while [ ! $# = 0 ]; do # command line passing carefully
    case "${1:-}" in
      "!" ) find_opts="$find_opts '!'" ;;
      -type | -t )
        shift
        case "${1:-}" in
          f | d ) find_opts="$find_opts -type '$1'"
        esac
        ;;
      -name | -n )
        shift
        find_opts="$find_opts -name '$1'"
        ;;
      -a | -o ) find_opts="$find_opts $1";;
      -* ) ;;
      * )
        dir="${1}"
        [ ! "$1" = / ] || dir="."
        find_dirs="$find_dirs '${dir#/}'"
        ;;
    esac
    shift
  done
  [ -n "$find_dirs" ] || \
    find_dirs="etc usr/local opt"

  cd "$OVERLAY_DIR"
  eval "find $find_dirs $find_opts" | sort -r
  )

list_files_filter() {
  ETCKEEPER_EXCLUDES="etc/.git | etc/.git/* | etc/.etckeeper"
  select_modified=
  select_obsolete=
  select_new=
  while [ ! $# = 0 ]; do # command line passing carefully
    case "${1:-}" in
      --etckeeper | -E ) ETCKEEPER_EXCLUDES="" ;;
      --mod ) select_modified=yes ;;
      --new ) select_new=yes ;;
      --obsolete | --obs | --cleanup ) select_obsolete=yes ;;
    esac
    shift
  done
  while read f; do
    case "$f" in
      . | .. ) continue ;;
    esac

    f="${f#./}"
    excludes="$ETCKEEPER_EXCLUDES"
    e=
    if [ -n "$excludes" ]; then
      eval "
        case '$f' in
          $excludes ) continue ;; # in exclude list
        esac
      "
    fi

    stat="-?-"
    kind="-"

    # directory | regular file | character special file | block special file | symbolic link
    kind_stat="$( stat -c "%t:%T:%a:%U:%G:%F" "$OVERLAY_DIR/$f" 2> /dev/null )"
    case "${kind_stat##*:}" in
      dir* )   kind="D" ;;
      reg* )   kind="F" ;;
      char* )  kind="c" ;;
      block* ) kind="b" ;;
      sym* )   kind="L" ;;
    esac

    if [ ! -e "$ROM_DIR/$f" ]; then
      stat=".N."
      case "${kind_stat}" in
        0:0:*char* )
          kind="-"
          stat="..."
          ;;
      esac
    else
      case "${kind_stat}" in
        0:0:*char* )
          kind="-"
          stat=".D."
          ;;
        *:dir* )
          stat="..."
          kind_rom_stat="$( stat -c "%t:%T:%a:%U:%G:%F" "$ROM_DIR/$f" 2> /dev/null || : )"
          [ "${kind_stat}" = "${kind_rom_stat}" ] || \
            stat="..p"
          ;;
        *:sym* )
          stat="..."
          kind_readlink="$( readlink "$OVERLAY_DIR/$f" 2> /dev/null || : )"
          kind_rom_readlink="$( readlink "$ROM_DIR/$f" 2> /dev/null || : )"
          [ "${kind_readlink}" = "${kind_rom_readlink}" ] || \
            stat="d.."
          ;;
        *:reg* )
          stat="..."
          kind_rom_stat="$( stat -c "%t:%T:%a:%U:%G:%F" "$ROM_DIR/$f" 2> /dev/null || : )"
          [ "${kind_stat}" = "${kind_rom_stat}" ] || \
            stat="${stat%[.-]}p"
          if ! cmp -s "$ROM_DIR/$f" "$OVERLAY_DIR/$f"; then
            stat="M${stat#[.-]}"
          fi
          ;;
        * )
          kind_rom_stat="$( stat -c "%t:%T:%a:%U:%G:%F" "$ROM_DIR/$f" 2> /dev/null || : )"
          [ "${kind_stat##*:}" = "${kind_rom_stat##*:}" ] || \
            stat=".T."
          ;;
        esac
    fi

    case "$select_modified:$stat:$kind" in
      yes:M??:F ) ;;
      yes:* ) continue ;;
    esac

    case "$select_new:$stat" in
      yes:?N?  ) ;;
      yes:* ) continue ;;
    esac

    case "$select_obsolete:$stat" in
      yes:...  ) ;;
      yes:* ) continue ;;
    esac

    echo "$stat  $kind  $f"
  done
  }

list_files_action() {
  do_diff=no
  do_cleanup=no
  simulate=yes
  while [ ! $# = 0 ]; do # command line passing carefully
    case "${1:-}" in
      --cleanup ) do_cleanup=yes ;;
      --diff ) do_diff=yes ;;
      --yes ) simulate=no ;;
    esac
    shift
  done
  while read i; do
    set -- $i
    if [ "$do_diff" = yes ]; then
      o="$ROM_DIR/$3"
      [ -f "$o" ] || o=/dev/null
      diff -ua "$o" "$OVERLAY_DIR/$3" || :
    elif [ "$do_cleanup" = yes ]; then

      case "$simulate:$1:$2" in
        *:...:D ) rmdir "$OVERLAY_DIR/$3" 2>/dev/null || : ;;
        #
        yes:...:? ) echo "'$3': would delete from overlay" ;;
        no:...:? )  ( set -x; rm -f "$OVERLAY_DIR/$3" ) ;;
      esac
    else
      echo "  $1   $2   $3"
    fi
  done
  }

help() { echo "E: not implemented, yet" >&2; exit 69; }

SCRIPT="$0"
list_files "$@"

# vim: ts=2 sw=2 et foldmethod=indent ft=sh
