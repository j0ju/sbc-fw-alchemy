#!/bin/sh

# mount
#  * read-only filesystem to /rom (current root)
#  * overlay to /overlay     LABEL=mmc-data if not exist create it

#- config
#- pedantic thumb-screws
  set -eu

#- debugging, if needed
  PS4="${0}[$$]: "
  #set -x

#- settings
  OVERLAY=/overlay
  ROM=/rom

log() {
  echo "PREINIT: $*"
}

#- is_safemode
#
#   Returns true IFF we were told to boot in safemode
#   (such as if the user held KEY1 for a few seconds at power on)
#
is_safemode() {
  grep -q 'safemode' /proc/cmdline
}

emergency_console() {
  set +eu
  echo "${0}[$$]::emergency_console() $*"
  PS4="${0}[$$]::emergency_console(): "
  echo ""
  log "--- emergency fall through console --- $0[$$]"
  env | sort
  log "---"
  mount
  log "--- emergency fall through console --- $0[$$]"
  echo ""
  set -x
  exec /bin/bash --login
}

pivot_overlay() {
  PS4="${0}[$$]::pivot_overlay(): "
  #set -x
  MOUNTS="dev proc tmp sys"
  NEWROOT=/tmp/newroot
  OLDROOT="$ROM"
  UPPER="$1/upper"
  WORK="$1/work"

  [ -d $UPPER ] || mkdir -p $UPPER
  [ -d $WORK ] || mkdir -p $WORK

  mkdir $NEWROOT
  mount -t overlay overlay -o lowerdir=/,upperdir=$UPPER,workdir=$WORK $NEWROOT

  [ -d $NEWROOT/$OLDROOT ] || mkdir -p $NEWROOT/$OLDROOT

  log Pivoting root
  pivot_root $NEWROOT $NEWROOT/$OLDROOT
  for mountpoint in $MOUNTS $1; do
    if mountpoint -q $OLDROOT/$mountpoint; then
      mount --move $OLDROOT/$mountpoint /$mountpoint
    fi
  done

  # Clean up, now that nothing is mounted here
  rmdir $NEWROOT
}

to_overlay() {
  PS4="${0}[$$]::to_overlay(): "
  #set -x
  trap emergency_console EXIT

  log "Starting"

  # Need /dev, /proc, and /tmp mounted, and /sys for good measure
  # /dev is automounted by kernel
  mount -t proc  proc  /proc
  mount -t sysfs sysfs /sys
  mount -t tmpfs tmpfs /tmp -o nodev,nosuid
  chmod 1777 /tmp

  if is_safemode || ! mount_overlay $OVERLAY; then
    OVERLAY=/tmp/overlay
    log "Entering safemode (overlay dir $OVERLAY)"
    export IS_SAFEMODE=1
  fi

  pivot_overlay $OVERLAY

  exec /rom$SCRIPT
}

exec_init() {
  PS4="${0}[$$]::exec_init(): "
  #set -x
  trap emergency_console EXIT
  init=/sbin/init

  for snippet in $( ls /lib/preinit.d/ /rom/lib/preinit.d/ 2>/dev/null | sort -u ); do
    case "$snippet" in
      /* ) continue ;;
    esac

    for dir in /lib /rom/lib; do
      ! [ -r "$dir/preinit.d/$snippet" ] || \
        break
      dir=
    done
    snippet="$dir/preinit.d/$snippet"
    #echo "I: pre-init: exec $snippet"
    case "$snippet" in
      /rom/*.once ) [ -r "${snippet#/rom}" ] || continue ;;
      /* ) ;;
      * )
        echo "E: snippet '$snippet', this should never happen." 1>&2
        exit 1
        ;;
    esac
    ( PS4="${0}[$$]::$snippet: "
      . "$snippet"
    )
    case "$snippet" in
      *.once ) rm -f "${snippet}" ;;
      /lib/* )
        ! [ -r /rom/$snippet ] || \
          ! cmp -s > /dev/null "$snippet" "/rom/${snippet}" || \
          rm -f "$snippet"
        ;;
    esac
  done
  rmdir /lib/preinit.d 2> /dev/null || :

  log "running $init"
  exec $init
}

SCRIPT="$0"

case "$$:$0" in
  1:/sbin/preinit ) to_overlay ;;
  1:/sbin/init ) to_overlay ;;
  1:/rom/sbin/init ) exec_init ;;
  1:/rom/sbin/preinit ) exec_init ;;
  1:* )
    log "$0[$$]: unhandled multi-call invocation as PID 1, dropping to emergency shell"
    trap emergency_console EXIT
    ;;
  * )
    log "$0 not running as PID 1 != $$, ABORT"
    exit 69
    ;;
esac

# vim ts=2 sw=2 et ft=sh
