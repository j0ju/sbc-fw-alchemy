#!/bin/sh

# mount
#  * read-only filesystem to /rom (current root)
#  * overlay to /overlay     LABEL=mmc-data if not exist create it

#- config
#- pedantic thumb-screws
  set -eu

#- debugging, if needed
  PS4="${0}[$$]: +"
  #set -x

#- settings
  OVERLAY=/overlay
  ROM=/rom

log() {
  echo "PREINIT: $*"
}

#- is_safemode
#
#   Returns true IFF we were told to boot in safemode
#   (such as if the user held KEY1 for a few seconds at power on)
#
is_safemode() {
  grep -q 'safemode' /proc/cmdline
}

emergency_console() {
  echo ""
  log "--- emergency fall through console --- $0[$$]"
  env | sort
  log "---"
  mount
  log "--- emergency fall through console --- $0[$$]"
  echo ""
  set -x
  exec /bin/bash --login
}

pivot_overlay() {
  MOUNTS="dev proc tmp sys"
  NEWROOT=/tmp/newroot
  OLDROOT="$ROM"
  UPPER=$1/upper
  WORK=$1/work

  [ -d $UPPER ] || mkdir -p $UPPER
  [ -d $WORK ] || mkdir -p $WORK

  mkdir $NEWROOT
  mount -t overlay overlay -o lowerdir=/,upperdir=$UPPER,workdir=$WORK $NEWROOT

  [ -d $NEWROOT/$OLDROOT ] || mkdir -p $NEWROOT/$OLDROOT

  log Pivoting root
  pivot_root $NEWROOT $NEWROOT/$OLDROOT
  for mountpoint in $MOUNTS $1; do
    if mountpoint -q $OLDROOT/$mountpoint; then
      mount --move $OLDROOT/$mountpoint /$mountpoint
    fi
  done

  # Clean up, now that nothing is mounted here
  rmdir $NEWROOT
}

to_overlay() {
  trap emergency_console EXIT

  log "Starting"

  # Need /dev, /proc, and /tmp mounted, and /sys for good measure
  # /dev is automounted by kernel
  mount -t proc  proc  /proc
  mount -t sysfs sysfs /sys
  mount -t tmpfs tmpfs /tmp -o nodev,nosuid
  chmod 1777 /tmp

  if is_safemode || ! mount_overlay $OVERLAY; then
    OVERLAY=/tmp/overlay
    log "Entering safemode (overlay dir $OVERLAY)"
    export IS_SAFEMODE=1
  fi

  pivot_overlay $OVERLAY

  exec /rom$SCRIPT
}

ensure_volatile_dir() {
  local link="$1"
  local dest="$(readlink "$link")"
  cd "${link%/*}"
  if ! mkdir -p "$dest" 2> /dev/null; then
    ensure_volatile_dir "${dest%/*}"
    mkdir -p "$dest"
  fi
}

exec_init() {
  trap emergency_console EXIT

  # fixes of /tmp and cleanup lefovers
  umount $ROM/$OVERLAY 2> /dev/null || :
  umount $ROM/$ROM 2> /dev/null || :
  # ensure symlinks targets in /var to somewhere /tmp exist
  find /var -type l | \
    while read d; do
      ensure_volatile_dir "$d"
    done
  mount -o remount,size=256k /dev || :

  # find init, try /sbin/preinit if it exists is executable and is not the same content as the current running script
  if [ -x /sbin/preinit ]; then
    if ! cmp -s /sbin/preinit $ROM/sbin/preinit; then
      log "found /sbin/preinit in overlay fs"
      log "running /sbin/preinit"
      exec /sbin/preinit
    else # if /sbin/preinit in overlay equals stock version, assume freshly initialized system
      rm -f /sbin/preinit /sbin/mount_overlay
    fi
  fi
  log "running /sbin/init"
  exec /sbin/init
}

wrap_init() {
  trap emergency_console EXIT
  if ! [ -x "$OVERLAY/upper/sbin/init" ]; then
    rm -f /sbin/init
    if [ -x /rom/lib/init ]; then
      ln -s /lib/init /sbin/init
    else
      ln -s /bin/busybox /sbin/init
    fi
  fi
  "$1"
}

SCRIPT="$0"

case "$$:$0" in
  1:/sbin/preinit ) to_overlay ;;
  1:/sbin/init ) to_overlay ;;
  1:/rom/sbin/init ) wrap_init exec_init ;;
  1:/rom/sbin/preinit ) exec_init ;;
  1:* )
    log "$0[$$]: unhandled multicall invocation as PID 1, dropping to emergency shell"
    trap emergency_console EXIT
    ;;
  * )
    log "$0 not running as PID 1 != $$, ABORT"
    exit 69
    ;;
esac

# vim ts=2 sw=2 et ft=sh
