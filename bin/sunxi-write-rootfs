#!/bin/sh
# (C) 2023-2025 Joerg Jungermann, GPLv2 see LICENSE

#-{ init
  umask 022
  set -eu
  export LC_ALL=C.UTF-8
  export LANG=C.UTF-8
#}-
#-{ defaults
  FS=f2fs # ext4
  BOOT_FS=ext4 # vfat
  BOOT_SIZE=144MiB
  AUTO_SUDO=yes
#}-

#-{ usage()
usage() {
cat >&2 << EOF

  $0 usage:
    ${0##*/} <TAR-root+boot> <BLOCKDEV> [OPTIONS] ...

    <TAR-root+boot>
    <BLOCKDEV>

  Options:

    -t <FS>                              - / filesystem
    --root-fs <FS>                         (ext2, ext3, ext4, f2fs)
                                           (default: $FS)

    --boot-fs <FS>                       - /boot filesystem
                                           (ext2, ext3, ext4, vfat)
                                           (default: $BOOT_FS)

    --/-size <SIZE>                      - create the root partition with an specific size
                                           (default: maximize)
                                           e.g.
                                           --/-size 8G -- would create an root partition of 8 GB

    --/boot-size <SIZE>                  - create the root partition with an specific size
                                           (default: $BOOT_SIZE)
                                           e.g.
                                           --/boot-size 127M -- would create an boot partition of 127 MB

    --[no-]auto-sudo                     - enables/disables auto sudo, if run as user

EOF
}
#}-
#-{ parse arguments for source tarball and target block device
  if [ -z "${1:-}" ]; then
    echo "E: SRC_TAR is missing." >&2
    usage
    exit 1
  fi
  if [ -z "${2:-}" ]; then
    echo "E: TARGET_DEV is missing." >&2
    usage
    exit 1
  fi

  TARGET_DEV="${2:-}"
  if [ ! -b "$TARGET_DEV" ]; then
    echo "E: TARGET_DEV($TARGET_DEV) not a block device." >&2
    exit 1
  fi

  PART_SEP=
  case "$TARGET_DEV" in
    *[0-9] ) PART_SEP=p ;;
  esac

  SRC_TAR="${1:-}"
  if [ ! -r "$SRC_TAR" ]; then
    echo "E: TAR does not exist." >&2
    exit 1
  fi

  shift
  shift
#}-
#-{ parse options
  while [ $# -ge 1 ]; do
    case "$1" in
      -t ) FS="$2"; shift ;;
      #
      --/-size )
        if [ -z "$2" ]; then
          echo "E: --/-size <SIZE> needs a size specifier, 'sfdisk' understands (man sfdisk)." >&2
           exit 1
        fi
        ROOT_SIZE="${2}";
        shift
        ;;
      --/boot-size )
        if [ -z "$2" ]; then
          echo "E: --/boot-size <SIZE> needs a size specifier, 'sfdisk' understands (man sfdisk)." >&2
           exit 1
        fi
        BOOT_SIZE="${2}";
        shift
        ;;
      #
      --auto-sudo )
        AUTO_SUDO=yes
        ;;
      --no-auto-sudo )
        AUTO_SUDO=no
        ;;
      "-?" | --help | -* ) usage; exit 1;;
    esac
    shift
  done
#}-
#-{ if AUTO_SUDO=yes, detect if needed
  SUDO=
  case "$AUTO_SUDO:$(id -u)" in
    yes:0 ) ;; # we are root, no sudo needed
    yes:* )
      SUDO=sudo
      ;;
  esac
#}-
#-{ detect decompressor
  DECOMPRESSOR=
  case "$SRC_TAR" in
    *.gz | *.tgz )   DECOMPRESSOR=gzip ;;
    *.bz2 | *.tbz2 ) DECOMPRESSOR=bzip2 ;;
    *.zstd | *.zst ) DECOMPRESSOR=zstd ;;
    *.xz | *.tpxz )  DECOMPRESSOR=xz ;;
    *.lzop | *.lzo ) DECOMPRESSOR=lzop ;;
  esac
  if [ -z "DECOMPRESSOR" ]; then
    usage
    echo "E: unknown extension for choosing decompressor (gz, xz, zstd, lzo, bzip2)." >&2
  fi

  if which pigz > /dev/null; then
    gzip() { pigz "$@"; }
  fi
  if which pixz > /dev/null; then
    xz() { pixz "$@"; }
  fi
#}-
#-{ create temporary working directory and ensure cleanup
TMPDIR=
trap cleanup EXIT 15 INT QUIT STOP CONT USR1 HUP USR2
cleanup() {
  local rs=$?
  trap '' EXIT
  for f in "$TMPDIR/boot" "$TMPDIR"; do
    grep " $f " /proc/mounts > /dev/null && \
      $SUDO umount "$f" || :
  done
  $SUDO rmdir "$TMPDIR"
  exit $rs
}
TMPDIR="$(mktemp -d)"
#}-
#-{ wipe, partition, format and mount disk
  echo "I: wipe $TARGET_DEV"

  echo "I: partition $TARGET_DEV"
  case "$BOOT_FS" in
    ext[234] ) BOOT_PART_TYPE=83 ;;
    vfat )     BOOT_PART_TYPE=0c ;;
    * )        echo "E: unknown filesystem type '$BOOT_FS' for /boot" >&2; exit 2;
  esac
  $SUDO wipefs -af "$TARGET_DEV" 1> /dev/null 2> /dev/null || :
$SUDO sfdisk "$TARGET_DEV" 1> /dev/null <<EOF
  label: dos
  1: type=$BOOT_PART_TYPE start=2048 size=${BOOT_SIZE} bootable
  2: type=83
EOF
  $SUDO fdisk -l "$TARGET_DEV" | sed -nre '/^[/]/ s/^/  / p'

  BOOT_DEV="$TARGET_DEV""$PART_SEP"1
  ROOT_DEV="$TARGET_DEV""$PART_SEP"2

  $SUDO wipefs -af 1> /dev/null \
    "$BOOT_DEV" \
    "$ROOT_DEV" \
    #

  echo "I: create /boot (ext4)"
  case "$BOOT_FS" in
    ext4 )
      $SUDO mkfs.ext4 -L boot -m 0 -q "$BOOT_DEV"
      ;;
    vfat )
      $SUDO mkfs.vfat -n boot -F32    "$BOOT_DEV"
      ;;
    * )
      echo "E: unknown or unsupport filesystem '$FS'" >&2
      exit 2
  esac > /dev/null

  MOUNT_OPTS=
  echo "I: create / ($FS)"
  case "$FS" in
    ext4 )
      $SUDO mkfs.ext4 -L rootfs -m 1 -q "$ROOT_DEV"
      ;;
    f2fs )
      $SUDO mkfs.f2fs -l rootfs      -q "$ROOT_DEV"
      ;;
    * )
      echo "E: unknown or unsupport filesystem '$FS'" >&2
      exit 2
  esac > /dev/null

  echo "I: mount /       ($TMPDIR)"
  $SUDO mount "$ROOT_DEV" "$TMPDIR" $MOUNT_OPTS
  echo "I: mount /boot   ($TMPDIR/boot)"
  $SUDO mkdir -p $TMPDIR/boot
  $SUDO mount "$BOOT_DEV" "$TMPDIR/boot"
#}-
#-{ extract tarball
  echo "I: extract $SRC_TAR"
  $DECOMPRESSOR -d < "$SRC_TAR" | \
    pv -brat | \
      $SUDO tar xf - -C "$TMPDIR" --atime-preserve --xattrs --acl
#}-
#-{ write uboot if /boot/uboot.egn exists
  if [ -f "$TMPDIR/boot/uboot.egn" ]; then
    echo "I: /boot/uboot.egn exist, write it to SD at offset 8192"
    $SUDO dd if=$TMPDIR/boot/uboot.egn of="$TARGET_DEV" bs=8192 seek=1 conv=notrunc status=none
  fi
#}-
#-{ fix fstab to UUID
  echo "I: adapt boot config"
  ROOT_UUID="$( $SUDO blkid -o value -s UUID "$ROOT_DEV" )"
  ROOT_FS="$( $SUDO blkid -o value -s TYPE "$ROOT_DEV" )"
  BOOT_UUID="$( $SUDO blkid -o value -s UUID "$BOOT_DEV" )"
  BOOT_FS="$( $SUDO blkid -o value -s TYPE "$BOOT_DEV" )"
  if [ -z "$ROOT_UUID" ]; then
    echo "E: FS UUID of / root partition not found"
    exit 2
  fi
  if [ -z "$BOOT_UUID" ]; then
    echo "E: FS UUID of /boot partition not found"
    exit 2
  fi
  echo "  /       $ROOT_FS UUID=$ROOT_UUID"
  echo "  /boot   $BOOT_FS UUID=$BOOT_UUID"
  ( FS="$ROOT_FS" MNT=/ BLKDEV="UUID=$ROOT_UUID"
  #- adapt /etc/fstab
    $SUDO sed -i -r -e 's!^([^[:space:]]+)[[:space:]]+('"$MNT"')[[:space:]]+[^[:space:]]+!'"$BLKDEV"' \2 '"$FS"'!' "$TMPDIR/etc/fstab"
  #- adapt /boot/armbianEnv.txt
    $SUDO sed -i -r \
        -e 's/^(rootdev=).*/\1'"$BLKDEV"'/' \
        -e 's/^(rootfstype=).*/\1'"$FS"'/' \
      "$TMPDIR/boot/armbianEnv.txt"
  )
  ( FS="$BOOT_FS" MNT=/boot BLKDEV="UUID=$BOOT_UUID"
  #- adapt /etc/fstab
    $SUDO sed -i -r -e 's!^([^[:space:]]+)[[:space:]]+('"$MNT"')[[:space:]]+[^[:space:]]+!'"$BLKDEV"' \2 '"$FS"'!' "$TMPDIR/etc/fstab"
  )
#}-
#-{ meta information: how was this script calles / image name
(
cat << EOF
cmdline: $(tr '\0' '\n' < /proc/$$/cmdline | sed -r -e "s/^/'/" -e "s/$/'/" | tr '\n' ' ')
image: $SRC_TAR
EOF
) | $SUDO tee "$TMPDIR/boot/${0##*/}.meta" > /dev/null
#}-
#-{ show df, sync & unmount
  echo "I: sync (MNTPNT=$TMPDIR)"
  df -h "$TMPDIR/boot" "$TMPDIR" | sed -r -e "s!$TMPDIR/?!/!" -e 's/^/  /' -e 's|/|  |'
  $SUDO sync
#}-
#-{ de-init and cleanup is done via trap
  echo "I: unmount (MNTPNT=$TMPDIR)"
#}-

# vim: ts=2 sw=2 foldmethod=marker foldmarker=#-{,#}-
