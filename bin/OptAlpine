#!/bin/sh
# (C) 2023-2025 Joerg Jungermann, GPLv2 see LICENSE
set -eu
#set -x

VER=3.21
CMD=
ARCH=armhf
HELP=

usage() {
  cat <<EOF
$0: this generates OptAlpine tarballs"

USAGE:
  ${0##*/} [OPTS] [OPERATION] -- [ALPINEPACKES]+

OPERATIONS:
  pkg    - geneate packages for [ALPINEPACKES] in '$OUTDIR'
         - the generated tarball contains all needed libraries
           (from ldd) and all package files
  search - search alpine repositories for packages
  shell  - shell into the $IMG container

OPTS:
  --version | -V  -  specify Alpine version
  --debug   | -d  -  enable debug
  --arch    | -a  -  specify Alpine architecture
  --help    | -h  -  display this text

EXAMPLES:
  * OptAlpine pkg bash mc screen minicom
    This generates tarballs for
      bash mc screen minicom
  * OptAlpine pkg /bin/busybox:/opt/alpine/bin/busybox
    This generates a tarball only containing Alpine's busybox
    installed to /opt/alpine/bin/busybox

NOTES:
  * The tarballs can be It can be extracted to the desired system via
      tar xf TARBALL -C /
  * this overwrites all files, so check first what you overwrite
  * there is now package management for uninstalling packages

EOF
  exit 1
}

while [ ! $# = 0 ]; do
  case "$1" in
    -V | --version ) VER=$2; shift ;;
    -d | --debug )   set -x ;;
    -h | --help )    HELP=yes ;;

    # for now only armhf is supported, Dockerfiles are needed
    -a | --arch )    ARCH="$2" ; shift ;;

    #
    [!-]* )          break ;;
    -- )             shift; break ;;
  esac
  shift
done

IMG="sbc:$ARCH-OptAlpine-$VER"
OUTDIR="./output/${IMG#*:}"

if [ "$HELP" = yes ]; then
  usage
  exit 1
fi

OP="${1:-}"
[ $# = 0 ] || shift

shell() {
  docker run -ti --rm "$IMG"
}

C=
cleanup() {
  [ -z "$C" ] || \
    docker rm -f "$C" > /dev/null
}
pkg() {
  trap cleanup EXIT
  C="$(docker run --rm -d "$IMG" tail -f /dev/null)"
  for p in "$@"; do
    PKG=
    case "$p" in
      /* )
        docker exec $C sh /src/img-mangler/alpine-mk-bin-tarball.sh $p "$OUTDIR"
        ;;
      * )
        docker exec $C apk add $p
        PKG="$PKG $p $(docker exec $C apk info -R $p | grep =[0-9] | grep -Eo ^[^=]+ | sort -u)"
        for p in $PKG; do
          docker exec $C sh /src/img-mangler/alpine-mk-pkg-tarball.sh $p "$OUTDIR"
        done
        ;;
    esac
  done
  PKGs="$(docker exec $C sh -c "ls $OUTDIR/*.bin.tar.gz $OUTDIR/*.pkg.tar.gz 2> /dev/null || :")"
  for f in $PKGs; do
    mkdir -p "$OUTDIR"
    echo "${f##*/}: "
    echo -n "  "
    docker cp "$C:$f" "$OUTDIR"
  done
}

search() {
  trap cleanup EXIT
  C="$(docker run --rm -d "$IMG" tail -f /dev/null)"
  docker exec $C apk update
  docker exec $C apk search "$@"
}

case "${OP}" in
  pkg | p )         pkg "$@" ;;
  search | s )      search "$@" ;;
  shell | sh | "" ) shell "$@" ;;
esac


