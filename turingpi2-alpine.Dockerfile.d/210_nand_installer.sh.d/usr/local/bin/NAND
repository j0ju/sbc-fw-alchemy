#!/bin/sh
set -eu
umask 022

unlock() {
  BOOTDEV="$(busybox mountpoint -n /boot/. | cut -f1 -d" ")"
  if ( booted_from_mmc ); then
    mount -o remount -w "$BOOTDEV"
    sed -i -e '/if env exists boot_unlocked/ i setenv boot_unlocked yes' /boot/boot.scr
    mkimage -T script -d /boot/boot.scr /boot/boot.scr.uimg > /dev/null
    mount -o remount -r "$BOOTDEV"
  fi
  status
}

lock() {
  BOOTDEV="$(busybox mountpoint -n /boot/. | cut -f1 -d" ")"
  if ( booted_from_mmc ); then
    mount -o remount -w "$BOOTDEV"
    sed -i -e '/setenv boot_unlocked yes/ d' /boot/boot.scr
    mkimage -T script -d /boot/boot.scr /boot/boot.scr.uimg > /dev/null
    mount -o remount -r "$BOOTDEV"
  fi
  status
}

status() {
  # do a null write
  # according to some meaningful content this did not erase that flash page
  #   root @ tpi2bmc > ~ > head -c 64 /dev/mtd0 | hexdump -C
  #   00000000  16 00 00 ea 65 47 4f 4e  2e 42 54 30 70 7c 4e eb  |....eGON.BT0p|N.|
  #   00000010  00 60 00 00 53 50 4c 02  00 00 00 00 00 00 00 00  |.`..SPL.........|
  #   00000020  2c 00 00 00 00 00 00 00  00 00 00 00 73 75 6e 38  |,...........sun8|
  #   00000030  69 2d 74 31 31 33 73 2d  74 75 72 69 6e 67 2d 70  |i-t113s-turing-p|
  #   00000040
  #   root @ tpi2bmc > ~ > : > /dev/mtd0
  #   root @ tpi2bmc > ~ > head -c 64 /dev/mtd0 | hexdump -C
  #   00000000  16 00 00 ea 65 47 4f 4e  2e 42 54 30 70 7c 4e eb  |....eGON.BT0p|N.|
  #   00000010  00 60 00 00 53 50 4c 02  00 00 00 00 00 00 00 00  |.`..SPL.........|
  #   00000020  2c 00 00 00 00 00 00 00  00 00 00 00 73 75 6e 38  |,...........sun8|
  #   00000030  69 2d 74 31 31 33 73 2d  74 75 72 69 6e 67 2d 70  |i-t113s-turing-p|
  #
  nstate=UNKNOWN
  if grep ^"setenv boot_unlocked" /boot/boot.scr.uimg; then
    nstate="UNLOCKED /dev/mtd0 (boot)"
  else
    nstate="LOCKED /dev/mtd0 (boot)"
  fi
  echo "NEXT BOOT: $nstate"

  cstate=UNKNOWN
  rs=69
  if ( exec 2> /dev/null; : > /dev/mtd0 ); then
    cstate="UNLOCKED /dev/mtd0 (boot)"
    rs=0
  else
    cstate="LOCKED /dev/mtd0 (boot)"
  fi
  echo "CURRENT  : $cstate"

  if [ "$cstate" != "$nstate" ]; then
    echo "I: Reboot needed."
  fi
  return $rs
}

flash() {
  booted_from_mmc

  SD_ROOT=/rom/mnt
  NAND_ROOT_TMP=/overlay/nand
  EROFS_IMG=/overlay/nand.erofs

  echo "I: build and sync $NAND_ROOT_TMP"
  CHANGED=n
  mkdir -p "$NAND_ROOT_TMP"
  for f in "$NAND_ROOT_TMP"/*; do
    if [ -f "$f" ] &&  [ -f "$SD_ROOT/${f#$NAND_ROOT_TMP}" ]; then
      continue
    fi
    if [ -d "$f" ] && [ -d "$SD_ROOT/${f#$NAND_ROOT_TMP}" ]; then
      continue
    fi
    case "$f" in
      */boot | */root.*fs ) continue ;;
    esac
    ( set -x
      rm -rf "$f"
    )
    CHANGED=y
  done

  for dir in proc dev sbin CURRENT CURRENT/boot; do
    if [ ! -d "$NAND_ROOT_TMP/$dir" ]; then
      ( set -x
        mkdir -p "$NAND_ROOT_TMP/$dir"
      )
      CHANGED=y
    fi
    for f in "$SD_ROOT/$dir"/*; do
      src="$f"
      dst="$NAND_ROOT_TMP${f#$SD_ROOT}"
      case "${f}" in # ignore
        */CURRENT/boot )
          if [ ! "$(readlink "$NAND_ROOT_TMP${f#$SD_ROOT}")" = ../boot ]; then
            rm -rf "$NAND_ROOT_TMP${f#$SD_ROOT}"
            ln -s ../boot "$NAND_ROOT_TMP${f#$SD_ROOT}"
            CHANGED=y
          fi
          if [ ! -d "$NAND_ROOT_TMP/boot" ]; then
            rm -rf "$NAND_ROOT_TMP/boot"
            mkdir -p "$NAND_ROOT_TMP/boot"
            CHANGED=y
          fi
          continue
          ;;
        */CURRENT/root.*fs )
          if [ ! "$(readlink "$NAND_ROOT_TMP${f#$SD_ROOT}")" = "../${f##*/}" ]; then
            rm -rf "$NAND_ROOT_TMP${f#$SD_ROOT}"
            ln -s "../${f##*/}" "$NAND_ROOT_TMP${f#$SD_ROOT}"
            CHANGED=y
          fi
          dst="$NAND_ROOT_TMP/${f##*/}"
          ;;
        */uboot.img | */build.meta | */boot.scr ) # do not duplicate uboot.img to NAND
          continue
          ;;
        */boot.scr.uimg ) # source them unmodified (LOCKED mtd0)
          src="/rom/boot/${f##*/}"
          ;;
      esac
      if ! cmp -s "$src" "$dst" 2> /dev/null; then
         if [ -f "$dst}" ]; then
           rm -f "$dst}"
           CHANGED=y
         fi
         rm -rf "$dst}"
         if [ -f "$src" ] || [ -d "$src" ]; then
           ( set -x
             cp -a "$src" "$dst"
           )
           CHANGED=y
         fi
      fi
    done
  done

  if [ "$CHANGED" = y ] || [ ! -f "$EROFS_IMG" ]; then
    rm -f "$NAND_ROOT_TMP/boot/uboot.img" # do not duplicate this in sqfs and erofs
    rm -f "$EROFS_IMG"
    ( set -x
      mkfs.erofs "$EROFS_IMG" "$NAND_ROOT_TMP"
    )
  fi

  echo "I: sync uboot"
  SIZE="$(stat -c %s "/rom/boot/uboot.img")"
  if ! head -c "$SIZE" /dev/mtd0 | cmp -s "/rom/boot/uboot.img" -; then
    if ( exec 2> /dev/null; : > /dev/mtd0 ); then
      ( set -x
        flashcp "/rom/boot/uboot.img" /dev/mtd0
      )
    else
      echo "W: uboot updated, but bootloader locked, SKIP" >&2
    fi
  fi

  while [ ! -d /sys/class/ubi/ubi0 ]; do
    ( set -x
      ubiattach -m 1 || ubiformat -q -y /dev/mtd1
    )
  done

  # enforce uboot-env is ubi_vol_id == 0, reformat ubi if that is not the case
  if ! [ "$(cat /sys/class/ubi/ubi0_0/name 2> /dev/null)" = "uboot-env" ]; then
    ( set -x
      ubidetach -m 1
      ubiformat -q -y /dev/mtd1
      ubiattach -m 1
    )
  fi

  if ! [ "$(cat /sys/class/ubi/ubi0_0/name 2> /dev/null)" = "uboot-env" ]; then
    ( set -x
      ubimkvol /dev/ubi0 -k -t static -N uboot-env -n 0 -s 64KiB
    )
  fi

  SIZE="$( stat -c %s "$EROFS_IMG" )"

  ubi_find_vol() {
    local vol=
    if vol="$( grep -H "$1" /sys/class/ubi/ubi*/name )"; then
      vol="${vol#/sys/class/ubi/}"
      vol="${vol%/name:*}"
    fi
    echo "$vol"
  }

  UBI_VOL="$(ubi_find_vol rootfs)"
  if ! head -c "$SIZE" "/dev/$UBI_VOL" | cmp -s "$EROFS_IMG" -; then
    ( set -x
      [ -z "$UBI_VOL" ] || \
        ubirmvol "/dev/${UBI_VOL%_*}" -N rootfs
      # delete overlay as it might space-wise collide
      # TODO: backup overlay
      OVL_VOL="$(ubi_find_vol overlay)"
      [ -z "$OVL_VOL" ] || \
        ubirmvol "/dev/${UBI_VOL%_*}" -N overlay
      ubimkvol "/dev/ubi0" -N rootfs -k -t static -s "$SIZE"
    )
    UBI_VOL="$(ubi_find_vol rootfs)"
    ( set -x
      ubiupdatevol "/dev/$UBI_VOL" /overlay/nand.erofs
    )
  fi
}

booted_from_mmc() {
  if mount | grep ubi | grep erofs > /dev/null; then
    echo "I: not started from SD/MMC card, ABORT"
    exit 2
  fi
}

help() {
cat <<EOF
${0##/*} ($0)

USAGE:
  ${0##/*} <COMMAND> [OPTIONS]
 
  Tool to flash current running SD image to NAND.

  Commands:
     flash                    - flashes current system to NAND
                                NOTE: deletes config(overlay) in NAND

     unlock | lock            - (un)lock bootloader /dev/mtd0
     status                   - status of bootloader /dev/mtd0

     backup                   - NOT implemented yet - will backup overlay
     sync                     - NOT implemented yet - will sync MMC overlay to NAND
EOF
}

CMD="${1:-}"
shift 2> /dev/null || :
case "$CMD" in
  unlock | u )       unlock "$@" ;;
  lock   | l )       lock "$@" ;;
  status | st ) status "$@" ;;
  flash )            flash "$@" ;;

  # TODO:
  #backup )           backup_overlay "$@" ;;
  "" )               help ; status ;;
  -h | --help )      help ;;
esac
